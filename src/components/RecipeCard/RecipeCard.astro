---
import { Image } from "astro:assets";
import type { Recipe } from "../../supabase/types";
import Whisk from "../Icon/Whisk.astro";
import ShareButton from "../ShareButton/ShareButton.astro";

type Props = {
  recipe: Recipe;
};

const { recipe } = Astro.props;
const { id, title, image_url, url } = recipe;
---

<a
  href={`./recipes/${id}`}
  aria-label={`open ${title}`}
  class:list={[
    "relative h-full grid grid-cols-2 max-h-44 rounded-md overflow-clip border border-transparent",
    "outline-none shadow-sm shadow-gray-600 dark:shadow-gray-200",
    "hover:dark:border-gray-300 hover:border-gray-600",
    "focus-within:dark:border-gray-300 focus-within:border-gray-600",
    "transition-all duration-200 ease-in-out",
  ]}
  data-share-card
>
  {
    image_url ? (
      <>
        <Image
          class="h-full w-full object-cover max-h-44"
          src={image_url}
          alt=""
          height={174}
          width={202}
        />
        <Whisk className="hidden" />
      </>
    ) : (
      <Whisk />
    )
  }
  <div class="p-4 flex-1 flex flex-col justify-between">
    <h3
      class="text-gray-200 font-semibold text-left mb-0 text-ellipsis line-clamp-3"
    >
      {title}
    </h3>
    <ShareButton {title} {url} className="absolute bottom-2 right-2" />
  </div>
</a>

<script>
  // Just in case a remote image gets borked... reuse the wisk image and remove the image element
  document.querySelectorAll("[data-share-card]").forEach((shareCard) => {
    const image = shareCard.querySelector("img");
    const whisk = shareCard.querySelector("[data-whisk-image]");
    image?.addEventListener("error", () => {
      image.remove();
      whisk?.classList.remove("hidden");
    });
  });
</script>
